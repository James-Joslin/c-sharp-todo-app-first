@page "/"
@using ToDoApp.Models

<div class = "todo-container">
    <h1>To-Do App!</h1>
    <div class = "todo-input">
        <input type = "text" @bind = "todoInput" /> 
        @* Binds code below to the html element making it functional *@
        <button @onclick = "addTodo">Add</button> 
        @* Remeber on click *@
    </div>

    @* To output the to do list to screen we need a for loop that outputs each ELEMENT of todos by index *@
    <!-- How does is this called each time the add button is pressed though? -->
    
    @for (int i = 0; i < todos.Count; i++)
    {
        int index = i;
        Console.WriteLine("Running");
        @* div foreach item within todos list *@
        <div class = "todo-item">
            <div class = "todo-item__text">
                @* Double underscore = BEM naming convention *@
                @todos[i].Title
            </div>
            <button class = "todo-item__close" @onclick = "@(() => removeTodo(index))">
            <!-- Standard brackets for methods! Not squared brackets -->
                &times;
                @* Creates an X symbol *@
            </button>
        </div>
    }
</div>

@code
{
    public string todoInput { get; set; }
    @* Why does todoInput not need standard brackets like other functions? *@
    @* todoInput is not a function it is a variable... muppet *@
    
    public List<Todo> todos = new List<Todo>();
    @* Lists declared with rounded brackets *@

    public void addTodo() 
    {
        if (todoInput != null)
        {
            var todo = new Todo();
            todo.Title = todoInput;
            <!-- Console.WriteLine(todoInput); -->
            todos.Add(todo);
            todoInput = null;
        }
        else
        {
            Console.WriteLine("Nothing to enter!");
        }
    }

    public void removeTodo(int index)
    {
        todos.RemoveAt(index);
    }
}